syntax = "proto3";

package dcache;

option go_package = "dcache/proto";

// 通用响应头
message Header {
  string cluster_id = 1;
  string node_id = 2;
  uint64 revision = 3;
  uint64 raft_term = 4;
}

// KeyValue结构
message KeyValue {
  string key = 1;
  string value = 2;
  uint64 create_revision = 3;
  uint64 mod_revision = 4;
  uint64 version = 5;
}

// Set
message SetRequest {
  string key = 1;
  string value = 2;
}
message SetResponse {
  Header header = 1;
  int32 success_count = 2;
  int32 error_count = 3;
  repeated string errors = 4;
  int32 code = 5;
  string error = 6;
}

// Get
message GetRequest {
  string key = 1;
}
message GetResponse {
  Header header = 1;
  repeated KeyValue kvs = 2;
  int32 success_count = 3;
  int32 error_count = 4;
  repeated string errors = 5;
  int32 code = 6;
  string error = 7;
}

// Delete
message DeleteRequest {
  string key = 1;
  bool error_on_not_exists = 2; // 新增，默认false
}
message DeleteResponse {
  Header header = 1;
  int32 success_count = 2;
  int32 error_count = 3;
  repeated string errors = 4;
  int32 code = 5;
  string error = 6;
}

// RangeScan
message RangeScanRequest {
  string prefix = 1;
  int32 limit = 2;
}
message RangeScanResponse {
  Header header = 1;
  repeated KeyValue kvs = 2;
  int32 success_count = 3;
  int32 error_count = 4;
  repeated string errors = 5;
  int32 code = 6;
  string error = 7;
}

// BatchSet
message BatchSetRequest {
  repeated KeyValue pairs = 1;
}
message BatchSetResponse {
  Header header = 1;
  int32 success_count = 2;
  int32 error_count = 3;
  repeated string errors = 4;
  int32 code = 5;
  string error = 6;
}

// BatchGet
message BatchGetRequest {
  repeated string keys = 1;
}
message BatchGetResponse {
  Header header = 1;
  repeated KeyValue kvs = 2;
  int32 success_count = 3;
  int32 error_count = 4;
  repeated string errors = 5;
  int32 code = 6;
  string error = 7;
}

// BatchDelete
message BatchDeleteRequest {
  repeated string keys = 1;
  bool error_on_not_exists = 2; // 新增，默认false
}
message BatchDeleteResponse {
  Header header = 1;
  int32 success_count = 2;
  int32 error_count = 3;
  repeated string errors = 4;
  int32 code = 5;
  string error = 6;
}

// StreamSet
message StreamSetResponse {
  Header header = 1;
  int32 success_count = 2;
  int32 error_count = 3;
  repeated string errors = 4;
  int32 code = 5;
  string error = 6;
}

// Status
message StatusRequest {}
message StatusResponse {
  Header header = 1;
  string leader = 2;
  repeated string nodes = 3;
  bool is_leader = 4;
  int32 code = 5;
  string error = 6;
}

// Health
message HealthRequest {}
message HealthResponse {
  Header header = 1;
  string status = 2;
  string role = 3;
  int32 code = 4;
  string error = 5;
}

// Members
message MembersRequest {}
message ClusterMember {
  string node_id = 1;
  string node_name = 2;
  string role = 3;
  string address = 4;
}
message MembersResponse {
  Header header = 1;
  repeated ClusterMember members = 2;
  int32 code = 3;
  string error = 4;
}

// DCache service
service DCache {
  rpc Set(SetRequest) returns (SetResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc RangeScan(RangeScanRequest) returns (RangeScanResponse);
  rpc BatchSet(BatchSetRequest) returns (BatchSetResponse);
  rpc BatchGet(BatchGetRequest) returns (BatchGetResponse);
  rpc BatchDelete(BatchDeleteRequest) returns (BatchDeleteResponse);
  rpc StreamSet(stream SetRequest) returns (StreamSetResponse);
  rpc Status(StatusRequest) returns (StatusResponse);
  rpc Health(HealthRequest) returns (HealthResponse);
  rpc Members(MembersRequest) returns (MembersResponse);
} 